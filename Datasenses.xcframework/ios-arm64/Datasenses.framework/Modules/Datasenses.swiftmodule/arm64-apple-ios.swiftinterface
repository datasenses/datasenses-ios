// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target arm64-apple-ios12.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name Datasenses
import AdSupport
import CoreTelephony
@_exported import Datasenses
import FirebaseAnalytics
import FirebaseCore
import FirebaseInstallations
import Foundation
import SQLite3
import Swift
import SystemConfiguration
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public protocol DatasensesType {
  func isValidNestedTypeAndValue() -> Swift.Bool
  func equals(rhs: any Datasenses.DatasensesType) -> Swift.Bool
}
extension Swift.Optional : Datasenses.DatasensesType {
  public func isValidNestedTypeAndValue() -> Swift.Bool
  public func equals(rhs: any Datasenses.DatasensesType) -> Swift.Bool
}
extension Swift.String : Datasenses.DatasensesType {
  public func isValidNestedTypeAndValue() -> Swift.Bool
  public func equals(rhs: any Datasenses.DatasensesType) -> Swift.Bool
}
extension Foundation.NSString : Datasenses.DatasensesType {
  public func isValidNestedTypeAndValue() -> Swift.Bool
  public func equals(rhs: any Datasenses.DatasensesType) -> Swift.Bool
}
extension Foundation.NSNumber : Datasenses.DatasensesType {
  public func isValidNestedTypeAndValue() -> Swift.Bool
  public func equals(rhs: any Datasenses.DatasensesType) -> Swift.Bool
}
extension Swift.Int : Datasenses.DatasensesType {
  public func isValidNestedTypeAndValue() -> Swift.Bool
  public func equals(rhs: any Datasenses.DatasensesType) -> Swift.Bool
}
extension Swift.UInt : Datasenses.DatasensesType {
  public func isValidNestedTypeAndValue() -> Swift.Bool
  public func equals(rhs: any Datasenses.DatasensesType) -> Swift.Bool
}
extension Swift.Double : Datasenses.DatasensesType {
  public func isValidNestedTypeAndValue() -> Swift.Bool
  public func equals(rhs: any Datasenses.DatasensesType) -> Swift.Bool
}
extension Swift.Float : Datasenses.DatasensesType {
  public func isValidNestedTypeAndValue() -> Swift.Bool
  public func equals(rhs: any Datasenses.DatasensesType) -> Swift.Bool
}
extension Swift.Bool : Datasenses.DatasensesType {
  public func isValidNestedTypeAndValue() -> Swift.Bool
  public func equals(rhs: any Datasenses.DatasensesType) -> Swift.Bool
}
extension Foundation.Date : Datasenses.DatasensesType {
  public func isValidNestedTypeAndValue() -> Swift.Bool
  public func equals(rhs: any Datasenses.DatasensesType) -> Swift.Bool
}
extension Foundation.URL : Datasenses.DatasensesType {
  public func isValidNestedTypeAndValue() -> Swift.Bool
  public func equals(rhs: any Datasenses.DatasensesType) -> Swift.Bool
}
extension Foundation.NSNull : Datasenses.DatasensesType {
  public func isValidNestedTypeAndValue() -> Swift.Bool
  public func equals(rhs: any Datasenses.DatasensesType) -> Swift.Bool
}
extension Swift.Array : Datasenses.DatasensesType {
  public func isValidNestedTypeAndValue() -> Swift.Bool
  public func equals(rhs: any Datasenses.DatasensesType) -> Swift.Bool
}
extension Foundation.NSArray : Datasenses.DatasensesType {
  public func isValidNestedTypeAndValue() -> Swift.Bool
  public func equals(rhs: any Datasenses.DatasensesType) -> Swift.Bool
}
extension Swift.Dictionary : Datasenses.DatasensesType {
  public func isValidNestedTypeAndValue() -> Swift.Bool
  public func equals(rhs: any Datasenses.DatasensesType) -> Swift.Bool
}
@_hasMissingDesignatedInitializers open class DatasensesAnalytic {
  @discardableResult
  open class func initialize(apiKey: Swift.String, trackAutomaticEvents: Swift.Bool = true, flushInterval: Swift.Double = 60, optOutTrackingByDefault: Swift.Bool = false) -> Datasenses.DatasensesInstance
  open class func shared() -> Datasenses.DatasensesInstance
  @objc deinit
}
public protocol DatasensesDelegate : AnyObject {
  func datasensesWillFlush(_ datasenses: Datasenses.DatasensesInstance) -> Swift.Bool
}
public typealias Properties = [Swift.String : any Datasenses.DatasensesType]
@_hasMissingDesignatedInitializers open class DatasensesInstance : Swift.CustomDebugStringConvertible {
  open var apiKey: Swift.String
  weak open var delegate: (any Datasenses.DatasensesDelegate)?
  open var distinctId: Swift.String
  open var anonymousId: Swift.String?
  open var userId: Swift.String?
  open var alias: Swift.String?
  open var appInstallationID: Swift.String?
  open var trackAutomaticEventsEnabled: Swift.Bool
  open var flushInterval: Swift.Double {
    get
    set
  }
  open var flushOnBackground: Swift.Bool {
    get
    set
  }
  open var flushBatchSize: Swift.Int {
    get
    set
  }
  open var debugDescription: Swift.String {
    get
  }
  open var loggingEnabled: Swift.Bool {
    get
    set
  }
  open var minimumSessionDuration: Swift.UInt64 {
    get
    set
  }
  open var maximumSessionDuration: Swift.UInt64 {
    get
    set
  }
  @objc deinit
}
extension Datasenses.DatasensesInstance {
  public func identify(distinctId: Swift.String, usePeople: Swift.Bool = true, completion: (() -> Swift.Void)? = nil)
  public func createAlias(_ alias: Swift.String, distinctId: Swift.String, usePeople: Swift.Bool = true, andIdentify: Swift.Bool = true, completion: (() -> Swift.Void)? = nil)
  public func reset(completion: (() -> Swift.Void)? = nil)
}
extension Datasenses.DatasensesInstance {
  public func archive()
}
extension Datasenses.DatasensesInstance {
  public func flush(performFullFlush: Swift.Bool = false, completion: (() -> Swift.Void)? = nil)
}
extension Datasenses.DatasensesInstance {
  public func track(event: Swift.String, properties: Datasenses.Properties? = nil)
  public func time(event: Swift.String)
  public func eventElapsedTime(event: Swift.String) -> Swift.Double
  public func clearTimedEvents()
  public func clearTimedEvent(event: Swift.String)
  public func optOutTracking()
  public func optInTracking(distinctId: Swift.String? = nil, properties: Datasenses.Properties? = nil)
  public func hasOptedOutTracking() -> Swift.Bool
  public func application(_ application: UIKit.UIApplication, didFinishLaunchingWithOptions launchOptions: [UIKit.UIApplication.LaunchOptionsKey : Any]?) -> Swift.Bool
  public func handleUrl(url: Foundation.URL?)
}
@_hasMissingDesignatedInitializers open class People {
  open var ignoreTime: Swift.Bool
  open func set(properties: Datasenses.Properties)
  open func set(property: Swift.String, to: any Datasenses.DatasensesType)
  open func setOnce(properties: Datasenses.Properties)
  open func unset(properties: [Swift.String])
  open func increment(properties: Datasenses.Properties)
  open func increment(property: Swift.String, by: Swift.Double)
  open func append(properties: Datasenses.Properties)
  open func remove(properties: Datasenses.Properties)
  open func union(properties: Datasenses.Properties)
  open func trackCharge(amount: Swift.Double, properties: Datasenses.Properties? = nil)
  open func clearCharges()
  open func deleteUser()
  @objc deinit
}
